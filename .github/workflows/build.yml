
name: Build OCTA NETWORK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm ls

      - name: Configure build environment
        run: |
          echo "🚀 تكوين بيئة البناء لـ OCTA NETWORK"
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "VITE_APP_VERSION=4.0.0" >> $GITHUB_ENV
          echo "VITE_APP_NAME=OCTA NETWORK" >> $GITHUB_ENV
          echo "VITE_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          
          # تحديد نوع الاستضافة
          if [[ "${{ github.repository }}" =~ ^[^/]+/[^/]+$ ]]; then
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            echo "VITE_BASE_URL=/${REPO_NAME}/" >> $GITHUB_ENV
            echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          else
            echo "VITE_BASE_URL=/" >> $GITHUB_ENV
          fi

      - name: Build application
        run: |
          echo "🏗️ بناء OCTA NETWORK..."
          npm run build
          
          # التحقق من نجاح البناء
          if [ -d "dist" ] && [ -f "dist/index.html" ]; then
            echo "✅ تم البناء بنجاح"
            ls -la dist/
          else
            echo "❌ فشل في البناء"
            exit 1
          fi
        env:
          NODE_ENV: production
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Optimize build output
        run: |
          echo "🔧 تحسين ملفات البناء..."
          
          # إنشاء ملفات التوافق
          touch ./dist/.nojekyll
          
          # تحسين index.html للمسارات النسبية
          if [ ! -z "$REPO_NAME" ]; then
            echo "🔄 تحديث المسارات لـ GitHub Pages..."
            sed -i 's|="/|="/'$REPO_NAME'/|g' ./dist/index.html
            sed -i 's|href="/|href="/'$REPO_NAME'/|g' ./dist/index.html
            sed -i 's|src="/|src="/'$REPO_NAME'/|g' ./dist/index.html
          fi
          
          # إنشاء ملف robots.txt
          cat > ./dist/robots.txt << 'EOF'
          User-agent: *
          Allow: /
          
          Sitemap: /sitemap.xml
          EOF
          
          # إنشاء ملف manifest.json
          cat > ./dist/manifest.json << 'EOF'
          {
            "name": "OCTA NETWORK",
            "short_name": "OCTA",
            "description": "منصة مراقبة الشبكات الذكية العالمية",
            "start_url": "/",
            "display": "standalone",
            "background_color": "#667eea",
            "theme_color": "#667eea",
            "icons": [
              {
                "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ctext y='.9em' font-size='90'%3E🌐%3C/text%3E%3C/svg%3E",
                "sizes": "192x192",
                "type": "image/svg+xml"
              }
            ]
          }
          EOF

      - name: Run build validation
        run: |
          echo "🧪 فحص صحة البناء..."
          
          # فحص الملفات الأساسية
          REQUIRED_FILES=("index.html" "manifest.json" "robots.txt" ".nojekyll")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "dist/$file" ]; then
              echo "✅ $file موجود"
            else
              echo "❌ $file مفقود"
              exit 1
            fi
          done
          
          # فحص حجم البناء
          BUILD_SIZE=$(du -sh dist/ | cut -f1)
          echo "📦 حجم البناء: $BUILD_SIZE"
          
          # فحص ملفات JS و CSS
          JS_COUNT=$(find dist/ -name "*.js" | wc -l)
          CSS_COUNT=$(find dist/ -name "*.css" | wc -l)
          echo "📄 ملفات JS: $JS_COUNT"
          echo "🎨 ملفات CSS: $CSS_COUNT"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: octa-network-build-node${{ matrix.node-version }}
          path: ./dist
          retention-days: 7
          compression-level: 6

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-node${{ matrix.node-version }}
          path: |
            npm-debug.log*
            yarn-debug.log*
            yarn-error.log*
          retention-days: 3

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          echo "🔒 فحص الأمان..."
          npm audit --audit-level moderate || true
          
      - name: Check for vulnerabilities
        run: |
          echo "🛡️ فحص الثغرات الأمنية..."
          npx audit-ci --moderate || true
