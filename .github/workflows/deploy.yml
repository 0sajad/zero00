
name: Universal Deploy - OCTA NETWORK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build universal application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create comprehensive deployment files
        run: |
          # Create .nojekyll for GitHub Pages
          touch ./dist/.nojekyll
          
          # Create universal 404 handler
          cp ./dist/index.html ./dist/404.html
          
          # Create _redirects for Netlify
          echo "/*    /index.html   200" > ./dist/_redirects
          
          # Create _headers for Netlify
          cat > ./dist/_headers << 'EOF'
          /*
            X-Frame-Options: DENY
            X-XSS-Protection: 1; mode=block
            X-Content-Type-Options: nosniff
            Referrer-Policy: strict-origin-when-cross-origin
            Permissions-Policy: geolocation=(), microphone=(), camera=()
          EOF
          
          # Create vercel.json for Vercel
          cat > ./dist/vercel.json << 'EOF'
          {
            "rewrites": [
              { "source": "/(.*)", "destination": "/index.html" }
            ],
            "headers": [
              {
                "source": "/(.*)",
                "headers": [
                  { "key": "X-Frame-Options", "value": "DENY" },
                  { "key": "X-Content-Type-Options", "value": "nosniff" },
                  { "key": "Cache-Control", "value": "public, max-age=31536000, immutable" }
                ]
              }
            ]
          }
          EOF
          
          # Create .htaccess for Apache/cPanel
          cat > ./dist/.htaccess << 'EOF'
          RewriteEngine On
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          
          # Security headers
          Header always set X-Frame-Options DENY
          Header always set X-Content-Type-Options nosniff
          Header always set X-XSS-Protection "1; mode=block"
          
          # Cache optimization
          <FilesMatch "\.(css|js|png|jpg|jpeg|gif|svg|woff|woff2)$">
            Header set Cache-Control "public, max-age=31536000, immutable"
          </FilesMatch>
          EOF
          
          # Create web.config for IIS
          cat > ./dist/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/index.html" />
                  </rule>
                </rules>
              </rewrite>
              <httpProtocol>
                <customHeaders>
                  <add name="X-Frame-Options" value="DENY" />
                  <add name="X-Content-Type-Options" value="nosniff" />
                </customHeaders>
              </httpProtocol>
            </system.webServer>
          </configuration>
          EOF
          
          # Create Docker files
          cat > ./dist/Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY . /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/nginx.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
          cat > ./dist/nginx.conf << 'EOF'
          events {
            worker_connections 1024;
          }
          http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            
            server {
              listen 80;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;
              
              location / {
                try_files $uri $uri/ /index.html;
              }
              
              location ~* \.(css|js|png|jpg|jpeg|gif|svg|woff|woff2)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
              }
            }
          }
          EOF
          
          # Create docker-compose.yml
          cat > ./dist/docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            octa-network:
              build: .
              ports:
                - "80:80"
              restart: unless-stopped
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create deployment summary
        run: |
          echo "## 🚀 OCTA NETWORK - Universal Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Website is now live and accessible on ALL platforms:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **GitHub Pages**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- ☁️ **Vercel**: Ready (upload dist folder)" >> $GITHUB_STEP_SUMMARY
          echo "- 🟢 **Netlify**: Ready (upload dist folder)" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️ **cPanel/Apache**: Ready (upload dist contents)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Docker**: Ready (use provided Dockerfile)" >> $GITHUB_STEP_SUMMARY
          echo "- 🖧 **VPS/Dedicated**: Ready (nginx config included)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Features Enabled:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Zero-delay loading with intelligent caching" >> $GITHUB_STEP_SUMMARY
          echo "- 🧠 Smart user experience with predictive loading" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Comprehensive error recovery system" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Real-time performance monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 Universal compatibility across all hosting platforms" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Enhanced security headers and protections" >> $GITHUB_STEP_SUMMARY
